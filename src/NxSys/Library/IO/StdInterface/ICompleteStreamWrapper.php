<?php
/**
 * Stream Wrapper Prototype
 *
 * $Id$
 *
 * @link http://nxsys.org/spaces/onx/wiki/Nexus_Common_Library
 * @package NxSys.Library\IO
 * @license http://nxsys.org/spaces/onx/wiki/License
 * Please see the license.txt file or the url above for full copyright and license information.
 * @copyright Copyright 2016 Nexus Systems, Inc.
 *
 * @author Chris R. Feamster <cfeamster@nxsysts.com>
 * @author $LastChangedBy$
 *
 * @version $Revision$
 */

/** Local Namespace **/
namespace NxSys\Library\IO\StdInterface;

// Project Namespaces
use NxSys\Library\IO\StdInterface as NclIo;

/**
 * Interface for use with a *complete* streamWrapper
 *
 * Usage: Use like any other interface except now you can 1) rely on this
 * class outside of StreamsExt and not have to use refelection 2) use the
 * ICompleteStreamWrapper type hint to help with that. E.g. you could now
 * handle, manage, and register streamwrappers more easily.
 *
 * Note: StreamsExt will behave differently depending on what method from a
 * wrapper is defined. As such, do not use unless you intend to configure each
 * method listed below (ie don't cheat and "stub" some out). It has warnings
 * that it wil raise in the in the course of operation that would reflect if a
 * method (and thus a feature) are implemented.
 *
 * Note2: The $context property is not enforced by the interface (it can't be)
 * but it *must* be defined, and be made public. StreamsExt will manipulate this
 * (see link)
 *
 * @var resource $context
 * @link http://php.net/manual/en/class.streamwrapper.php
 */
interface ICompleteStreamWrapper
{
	/* Properties */
	/**
	 * @var resouce context
	 * @link http://php.net/manual/en/class.streamwrapper.php#streamwrapper.props.context
	 */
	/** public $context; */

	/* Methods */
	/**
	 * Constructs a new stream wrapper
	 *
	 * Called when opening the stream wrapper, right before streamWrapper::stream_open().
	 * @link http://php.net/manual/en/streamwrapper.construct.php
	 */
	public function __construct();

	/**
	 * Destructs an existing stream wrapper
	 *
	 * Called when closing the stream wrapper, right before streamWrapper::stream_flush().
	 * @link http://php.net/manual/en/streamwrapper.destruct.php
	 */
	public function __destruct();

	/**
	 * Close directory handle
	 *
	 * This method is called in response to closedir().
	 * Any resources which were locked, or allocated, during opening and use of the directory stream should be released.
	 * @return bool Returns TRUE on success or FALSE on failure.
	 * @link http://php.net/manual/en/streamwrapper.dir-closedir.php
	 */
	public function dir_closedir();

	/**
	 * Open directory handle
	 *
	 * This method is called in response to opendir().
	 * @param string $path Specifies the URL that was passed to opendir()
	 * @param int $options Whether or not to enforce safe_mode (0x04)
	 * @return bool Returns TRUE on success or FALSE on failure.
	 * @link http://php.net/manual/en/streamwrapper.dir-opendir.php
	 */
	public function dir_opendir( $path, $options );

	/**
	 * Read entry from directory handle
	 *
	 * This method is called in response to readdir().
	 * @return string Should return string representing the next filename, or FALSE if there is no next file.
	 * @link http://php.net/manual/en/streamwrapper.dir-readdir.php
	 */
	public function dir_readdir();

	/**
	 * Rewind directory handle
	 *
	 * This method is called in response to rewinddir().
	 * Should reset the output generated by streamWrapper::dir_readdir().
	 * i.e.: The next call to streamWrapper::dir_readdir() should return the
	 * first entry in the location returned by streamWrapper::dir_opendir().
	 * @return bool Returns TRUE on success or FALSE on failure.
	 * @link http://php.net/manual/en/streamwrapper.dir-rewinddir.php
	 */
	public function dir_rewinddir();

	/**
	 * Create a directory
	 *
	 * This method is called in response to mkdir().
	 * @param string Directory which should be created.
	 * @param int The value passed to mkdir().
	 * @param int A bitwise mask of values, such as STREAM_MKDIR_RECURSIVE.
	 * @return bool Returns TRUE on success or FALSE on failure.
	 * @link http://php.net/manual/en/streamwrapper.mkdir.php
	 */
	public function mkdir( $path, $mode, $options );

	/**
	 * Renames a file or directory
	 *
	 * This method is called in response to rename(). Should attempt to rename path_from to path_to
	 * @param string The URL to the current file.
	 * @param string The URL which the path_from should be renamed to.
	 * @return bool Returns TRUE on success or FALSE on failure.
	 * @link http://php.net/manual/en/streamwrapper.rename.php
	 */
	public function rename( $path_from, $path_to );

	/**
	 * Removes a directory
	 *
	 * This method is called in response to rmdir().
	 * @param string $path The directory URL which should be removed.
	 * @param int $options A bitwise mask of values, such as STREAM_MKDIR_RECURSIVE.
	 * @return bool Returns TRUE on success or FALSE on failure.
	 * @link http://php.net/manual/en/streamwrapper.rmdir.php
	 */
	public function rmdir( $path, $options );

	/**
	 * Retrieve the underlaying resource
	 *
	 * This method is called in response to stream_select().
	 * @param int $cast_as Can be STREAM_CAST_FOR_SELECT when stream_select()
	 * 	is calling stream_cast() or STREAM_CAST_AS_STREAM when stream_cast() is called for other uses.
	 * @return resource|bool Should return the underlying stream resource used by the wrapper, or FALSE.
	 * @link http://php.net/manual/en/streamwrapper.stream-cast.php
	 */
	public function stream_cast( $cast_as );

	/**
	 * Close a resource
	 *
	 * This method is called in response to fclose(). All resources that were locked, or allocated, by the wrapper should be released.
	 * @return void
	 * @link http://php.net/manual/en/streamwrapper.stream-close.php
	 */
	public function stream_close();

	/**
	 * Tests for end-of-file on a file pointer
	 *
	 * This method is called in response to feof().
	 * @return bool Should return TRUE if the read/write position is at the end
	 *  of the stream and if no more data is available to be read, or FALSE otherwise.
	 * @link http://php.net/manual/en/streamwrapper.stream-eof.php
	 */
	public function stream_eof();

	/**
	 * Flushes the output
	 *
	 * This method is called in response to fflush() and when the stream is
	 * being closed while any unflushed data has been written to it before. If
	 * you have cached data in your stream but not yet stored it into the
	 * underlying storage, you should do so now.
	 *
	 * @return bool Should return TRUE if the cached data was successfully
	 *  stored (or if there was no data to store), or FALSE if the data could not be stored.
	 * @link http://php.net/manual/en/streamwrapper.stream-flush.php
	 */
	public function stream_flush();

	/**
	 * Advisory file locking
	 *
	 * This method is called in response to flock(), when file_put_contents()
	 * (when flags contains LOCK_EX), stream_set_blocking() and when closing the
	 * stream (LOCK_UN).
	 *
	 * @param int $operation Is one of the following: LOCK_SH|LOCK_EX|LOCK_UN|LOCK_NB
	 * @return bool Returns TRUE on success or FALSE on failure.
	 * @link http://php.net/manual/en/streamwrapper.stream-lock.php
	 */
	public function stream_lock ( $operation );

	/**
	 * Change stream metadata
	 *
	 * This method is called to set metadata on the stream. It is called when
	 * one of the following functions is called on a stream URL: touch(),
	 * chmod(), chown(), or chgrp()
	 * @param string $path The file path or URL to set metadata. Note that in
	 *  the case of a URL, it must be a :// delimited URL. Other URL forms are not supported.
	 * @param int $option @see link
	 * @param mixed $value @see link
	 * @return bool Returns TRUE on success or FALSE on failure. If option is
	 *  not implemented, FALSE should be returned.
	 * @link http://php.net/manual/en/streamwrapper.stream-metadata.php
	 */
	public function stream_metadata ($path, $option,  $value);

	/**
	 * Opens file or URL
	 *
	 * This method is called immediately after the wrapper is initialized (f.e. by fopen() and file_get_contents()).
	 * @param string Specifies the URL that was passed to the original function.
	 * @param string The mode used to open the file, as detailed for fopen().
	 * @param int Holds additional flags set by the streams API.
	 * @param string If the path is opened successfully, and STREAM_USE_PATH is
	 *  set in options, opened_path should be set to the full path of the
	 *  file/resource that was actually opened.
	 * @return bool Returns TRUE on success or FALSE on failure.
	 * @link http://php.net/manual/en/streamwrapper.stream-open.php
	 */
	public function stream_open ( $path , $mode , $options , &$opened_path );

	/**
	 * Read from stream
	 *
	 * This method is called in response to fread() and fgets().
	 * @param int $count How many bytes of data from the current position should be returned.
	 * @return string If there are less than count bytes available, return as
	 *  many as are available. If no more data is available, return either FALSE
	 *  or an empty string.
	 * @link http://php.net/manual/en/streamwrapper.stream-read.php
	 */
	public function stream_read ( $count );

	/**
	 * Seeks to specific location in a stream
	 *
	 * This method is called in response to fseek(). The read/write position of
	 * the stream should be updated according to the offset and whence.
	 * @param int $offset The stream offset to seek to.
	 * @param int SEEK_SET|SEEK_CUR|SEEK_END
	 * @return bool Return TRUE if the position was updated, FALSE otherwise.
	 * @link http://php.net/manual/en/streamwrapper.stream-seek.php
	 */
	public function stream_seek ( $offset, $whence = NULL );

	/**
	 * Change stream options
	 *
	 * This method is called to set options on the stream.
	 * @param int $options see @link
	 * @param int $arg1 see @link
	 * @param int $arg2 see @link
	 * @return bool Returns TRUE on success or FALSE on failure. If option is
	 *  not implemented, FALSE should be returned.
	 * @link http://php.net/manual/en/streamwrapper.stream-set-option.php
	 */
	public function stream_set_option ( $option , $arg1 , $arg2 );

	/**
	 * Retrieve information about a file resource
	 *
	 * This method is called in response to fstat().
	 * @return array @see stat()
	 * @link http://php.net/manual/en/streamwrapper.stream-stat.php
	 * @see stat()
	 */
	public function stream_stat();

	/**
	 * Retrieve the current position of a stream
	 *
	 * This method is called in response to fseek() to determine the current
	 * position.
	 * @return int Should return the current position of the stream.
	 * @link http://php.net/manual/en/streamwrapper.stream-tell.php
	 */
	public function stream_tell();

	/**
	 * Truncate stream
	 *
	 * Will respond to truncation, e.g., through ftruncate().
	 * @param int $new_size The new size
	 * @return bool Returns TRUE on success or FALSE on failure.
	 * @link http://php.net/manual/en/streamwrapper.stream-truncate.php
	 */
	public function stream_truncate ( $new_size );

	/**
	 * Write to stream
	 *
	 * This method is called in response to fwrite().
	 * @param string $data Should be stored into the underlying stream.
	 * @return int Should return the number of bytes that were successfully
	 *  stored, or 0 if none could be stored.
	 * @link http://php.net/manual/en/streamwrapper.stream-write.php
	 */
	public function stream_write ( $data );

	/**
	 * Delete a file
	 *
	 * This method is called in response to unlink().
	 * @param string $path The file URL which should be deleted.
	 * @return bool Returns TRUE on success or FALSE on failure.
	 * @link http://php.net/manual/en/streamwrapper.unlink.php
	 */
	public function unlink ( $path );

	/**
	 * Retrieve information about a file
	 *
	 * This method is called in response to all stat() related functions.
	 * @param strng $path The file path or URL to stat. Note that in the case of a
	 *  URL, it must be a :// delimited URL. Other URL forms are not supported.
	 * @param int $flags
	 * @return array Should return as many elements as stat() does. Unknown or
	 *  unavailable values should be set to a rational value (usually 0).
	 * @link http://php.net/manual/en/streamwrapper.url-stat.php
	 */
	public function url_stat ( $path , $flags );
}
